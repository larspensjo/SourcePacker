use crate::core::{
    self, ArchiveStatus, ArchiverOperations, ConfigError, ConfigManagerOperations, FileNode,
    FileState, FileSystemScannerOperations, Profile, ProfileError, ProfileManagerOperations,
    StateManagerOperations,
};
use crate::platform_layer::{
    AppEvent, CheckState, MessageSeverity, PlatformCommand, PlatformEventHandler,
    TreeItemDescriptor, TreeItemId, WindowId, types::MenuAction,
};
use std::collections::{HashMap, HashSet, VecDeque};
use std::path::{Path, PathBuf};
use std::sync::Arc;

// Import log macros
use log::{debug, error, info, trace, warn};

pub const ID_BUTTON_GENERATE_ARCHIVE_LOGIC: i32 = 1002;
pub(crate) const APP_NAME_FOR_PROFILES: &str = "SourcePacker";

type PathToTreeItemIdMap = HashMap<PathBuf, TreeItemId>;

#[derive(Debug, PartialEq)]
pub(crate) enum PendingAction {
    SavingArchive,
    SavingProfile,
    CreatingNewProfileGetName,
    CreatingNewProfileGetRoot,
    SettingArchivePath,
}

// --- Status Message Macros ---
macro_rules! status_message {
    ($self:expr, $severity:expr, $log_macro:ident, $($arg:tt)*) => {{
        let text = format!($($arg)*);
        // Log using the standard `log` crate
        $log_macro!("AppLogic Status: {}", text);

        // Update UI status bar
        if let Some(main_id) = $self.main_window_id {
            $self.synchronous_command_queue
                .push_back(PlatformCommand::UpdateStatusBarText {
                    window_id: main_id,
                    text: text, // Use the already formatted text
                    severity: $severity,
                });
        } else {
            // Fallback if no window_id (e.g., log to console/logger, or simply do nothing if UI update is impossible)
            // The message is already logged by $log_macro!, so no need for eprintln here for status.
            // Consider if there's any specific action for UI-less status if needed.
        }
    }};
}

// Specific severity macros, now also call the corresponding `log` macro.
macro_rules! app_info { ($self:expr, $($arg:tt)*) => { status_message!($self, MessageSeverity::Information, info, $($arg)*) }; }
macro_rules! app_error { ($self:expr, $($arg:tt)*) => { status_message!($self, MessageSeverity::Error, error, $($arg)*) }; }
macro_rules! app_warn { ($self:expr, $($arg:tt)*) => { status_message!($self, MessageSeverity::Warning, warn, $($arg)*) }; }

/*
 * Manages the core application state and UI logic in a platform-agnostic manner.
 * It processes UI events received from the platform layer and generates commands
 * to update the UI. It depends on `ConfigManagerOperations` for app configuration,
 * `ProfileManagerOperations` for profile data, `FileSystemScannerOperations`
 * for directory scanning, `ArchiverOperations` for archiving, and
 * `StateManagerOperations` for tree state management.
 * Commands generated by event handlers are enqueued internally and retrieved by
 * the platform layer. Logging of its operations is done via the `log` crate.
 */
pub struct MyAppLogic {
    main_window_id: Option<WindowId>,
    file_nodes_cache: Vec<FileNode>,
    path_to_tree_item_id: PathToTreeItemIdMap,
    next_tree_item_id_counter: u64,
    root_path_for_scan: PathBuf,
    current_profile_name: Option<String>,
    current_profile_cache: Option<Profile>,
    current_archive_status: Option<ArchiveStatus>,
    pending_action: Option<PendingAction>,
    pending_new_profile_name: Option<String>,
    config_manager: Arc<dyn ConfigManagerOperations>,
    profile_manager: Arc<dyn ProfileManagerOperations>,
    file_system_scanner: Arc<dyn FileSystemScannerOperations>,
    archiver: Arc<dyn ArchiverOperations>,
    state_manager: Arc<dyn StateManagerOperations>,
    synchronous_command_queue: VecDeque<PlatformCommand>,
}

impl MyAppLogic {
    /*
     * Initializes a new instance of the application logic.
     * Requires implementations for `ConfigManagerOperations` (app config),
     * `ProfileManagerOperations` (profile data), `FileSystemScannerOperations` (directory scanning),
     * `ArchiverOperations` (archiving), and `StateManagerOperations` (tree state management).
     * Sets up default application states and an empty command queue.
     */
    pub fn new(
        config_manager: Arc<dyn ConfigManagerOperations>,
        profile_manager: Arc<dyn ProfileManagerOperations>,
        file_system_scanner: Arc<dyn FileSystemScannerOperations>,
        archiver: Arc<dyn ArchiverOperations>,
        state_manager: Arc<dyn StateManagerOperations>,
    ) -> Self {
        MyAppLogic {
            main_window_id: None,
            file_nodes_cache: Vec::new(),
            path_to_tree_item_id: HashMap::new(),
            next_tree_item_id_counter: 1,
            root_path_for_scan: PathBuf::from("."),
            current_profile_name: None,
            current_profile_cache: None,
            current_archive_status: None,
            pending_action: None,
            pending_new_profile_name: None,
            config_manager,
            profile_manager,
            file_system_scanner,
            archiver,
            state_manager,
            synchronous_command_queue: VecDeque::new(),
        }
    }

    fn generate_tree_item_id(&mut self) -> TreeItemId {
        let id = self.next_tree_item_id_counter;
        self.next_tree_item_id_counter += 1;
        TreeItemId(id)
    }

    pub(crate) fn build_tree_item_descriptors_recursive(&mut self) -> Vec<TreeItemDescriptor> {
        return Self::build_tree_item_descriptors_recursive_internal(
            &self.file_nodes_cache,
            &mut self.path_to_tree_item_id,
            &mut self.next_tree_item_id_counter,
        );
    }

    fn build_tree_item_descriptors_recursive_internal(
        nodes: &[FileNode],
        path_to_tree_item_id: &mut PathToTreeItemIdMap,
        next_tree_item_id_counter: &mut u64,
    ) -> Vec<TreeItemDescriptor> {
        let mut descriptors = Vec::new();
        for node in nodes {
            let id_val = *next_tree_item_id_counter;
            *next_tree_item_id_counter += 1;
            let item_id = TreeItemId(id_val);

            path_to_tree_item_id.insert(node.path.clone(), item_id);

            let descriptor = TreeItemDescriptor {
                id: item_id,
                text: node.name.clone(),
                is_folder: node.is_dir,
                state: match node.state {
                    FileState::Selected => CheckState::Checked,
                    _ => CheckState::Unchecked,
                },
                children: Self::build_tree_item_descriptors_recursive_internal(
                    &node.children,
                    path_to_tree_item_id,
                    next_tree_item_id_counter,
                ),
            };
            descriptors.push(descriptor);
        }
        descriptors
    }

    /*
     * Handles the completion of the initial static UI setup for the main window.
     * It attempts to load the last used profile. If successful, it uses that profile's
     * settings to activate the UI. Otherwise, it initiates a flow for the user to
     * select or create a new profile, keeping the main window hidden until a profile
     * is active. Commands generated are enqueued.
     */
    fn _on_ui_setup_complete(&mut self, window_id: WindowId) {
        self.main_window_id = Some(window_id);
        log::debug!(
            "Main window created (ID: {:?}). Attempting to load last profile.",
            window_id
        );

        match self
            .config_manager
            .load_last_profile_name(APP_NAME_FOR_PROFILES)
        {
            Ok(Some(last_profile_name)) if !last_profile_name.is_empty() => {
                log::debug!("Found last used profile name: {}", last_profile_name);
                match self
                    .profile_manager
                    .load_profile(&last_profile_name, APP_NAME_FOR_PROFILES)
                {
                    Ok(profile) => {
                        app_info!(
                            self,
                            "Successfully loaded last profile '{}' on startup.",
                            profile.name
                        );
                        let operation_status_message =
                            format!("Profile '{}' loaded.", profile.name);
                        self._activate_profile_and_show_window(
                            window_id,
                            profile,
                            operation_status_message,
                        );
                    }
                    Err(e) => {
                        app_error!(
                            self,
                            "Failed to load last profile '{}': {:?}. Initiating selection.",
                            last_profile_name,
                            e
                        );
                        self.initiate_profile_selection_or_creation(window_id);
                    }
                }
            }
            Ok(_) => {
                app_info!(
                    self,
                    "No last profile name found or it was empty. Initiating selection/creation."
                );
                self.initiate_profile_selection_or_creation(window_id);
            }
            Err(e) => {
                app_error!(
                    self,
                    "Error loading last profile name: {:?}. Initiating selection.",
                    e
                );
                self.initiate_profile_selection_or_creation(window_id);
            }
        }
    }

    fn gather_selected_deselected_paths_recursive(
        nodes: &[FileNode],
        selected: &mut HashSet<PathBuf>,
        deselected: &mut HashSet<PathBuf>,
    ) {
        for node in nodes {
            match node.state {
                FileState::Selected => {
                    selected.insert(node.path.clone());
                }
                FileState::Deselected => {
                    deselected.insert(node.path.clone());
                }
                FileState::Unknown => {}
            }
            if node.is_dir && !node.children.is_empty() {
                Self::gather_selected_deselected_paths_recursive(
                    &node.children,
                    selected,
                    deselected,
                );
            }
        }
    }

    fn create_profile_from_current_state(&self, new_profile_name: String) -> Profile {
        let mut selected_paths = HashSet::new();
        let mut deselected_paths = HashSet::new();

        Self::gather_selected_deselected_paths_recursive(
            &self.file_nodes_cache,
            &mut selected_paths,
            &mut deselected_paths,
        );

        Profile {
            name: new_profile_name,
            root_folder: self.root_path_for_scan.clone(),
            selected_paths,
            deselected_paths,
            archive_path: self
                .current_profile_cache
                .as_ref()
                .and_then(|p| p.archive_path.clone()),
        }
    }

    fn refresh_tree_view_from_cache(&mut self, window_id: WindowId) {
        self.next_tree_item_id_counter = 1;
        self.path_to_tree_item_id.clear();
        let descriptors = Self::build_tree_item_descriptors_recursive_internal(
            &self.file_nodes_cache,
            &mut self.path_to_tree_item_id,
            &mut self.next_tree_item_id_counter,
        );
        self.synchronous_command_queue
            .push_back(PlatformCommand::PopulateTreeView {
                window_id,
                items: descriptors,
            });
    }

    fn update_current_archive_status(&mut self) {
        if self.main_window_id.is_some() {
            if let Some(profile) = &self.current_profile_cache {
                let status = self
                    .archiver
                    .check_archive_status(profile, &self.file_nodes_cache);
                self.current_archive_status = Some(status);

                let status_text = format!("Archive: {:?}", status);
                match status {
                    ArchiveStatus::ErrorChecking(_) => app_error!(self, "{}", status_text),
                    _ => log::debug!("{}", status_text),
                };
            } else {
                self.current_archive_status = None;
                app_info!(self, "No profile loaded");
            }
        } else {
            self.current_archive_status = None;
            // eprintln used here as no window_id for status bar. This is an internal logic log.
            log::error!(
                "AppLogic: update_current_archive_status called but no main_window_id. Status cleared internally."
            );
        }
    }

    pub(crate) fn find_filenode_mut<'a>(
        nodes: &'a mut [FileNode],
        path_to_find: &Path,
    ) -> Option<&'a mut FileNode> {
        for node in nodes.iter_mut() {
            if node.path == path_to_find {
                return Some(node);
            }
            if node.is_dir && !node.children.is_empty() {
                if let Some(found_in_child) =
                    Self::find_filenode_mut(&mut node.children, path_to_find)
                {
                    return Some(found_in_child);
                }
            }
        }
        None
    }

    pub(crate) fn find_filenode_ref<'a>(
        nodes: &'a [FileNode],
        path_to_find: &Path,
    ) -> Option<&'a FileNode> {
        for node in nodes.iter() {
            if node.path == path_to_find {
                return Some(node);
            }
            if node.is_dir && !node.children.is_empty() {
                if let Some(found_in_child) = Self::find_filenode_ref(&node.children, path_to_find)
                {
                    return Some(found_in_child);
                }
            }
        }
        None
    }

    pub(crate) fn collect_visual_updates_recursive(
        &self,
        node: &FileNode,
        updates: &mut Vec<(TreeItemId, CheckState)>,
    ) {
        if let Some(item_id) = self.path_to_tree_item_id.get(&node.path) {
            let check_state = match node.state {
                FileState::Selected => CheckState::Checked,
                _ => CheckState::Unchecked,
            };
            updates.push((*item_id, check_state));

            if node.is_dir {
                for child in &node.children {
                    self.collect_visual_updates_recursive(child, updates);
                }
            }
        } else {
            log::error!(
                "AppLogic: Could not find TreeItemId for path {:?} during visual update collection.",
                node.path
            );
        }
    }

    fn handle_window_close_requested(&mut self, window_id: WindowId) {
        if self.main_window_id == Some(window_id) {
            self.synchronous_command_queue
                .push_back(PlatformCommand::CloseWindow { window_id });
        }
    }

    fn handle_window_destroyed(&mut self, window_id: WindowId) {
        if self.main_window_id == Some(window_id) {
            // Log directly that the main window is being handled for destruction.
            // The log::debug! macro checks self.main_window_id to queue UI status updates.
            // By setting self.main_window_id = None first, or by logging directly like this,
            // we avoid trying to send a status bar update to a window that's already gone
            // from the platform layer's perspective.
            log::debug!(
                "AppLogic: Main window (ID: {:?}) destroyed notification received by AppLogic.",
                self.main_window_id
            );

            self.main_window_id = None; // Clear the main window ID to avoid trying to send a status bar update

            // Clear other state associated with the UI or current session.
            self.current_archive_status = None;
            self.path_to_tree_item_id.clear();
            self.pending_action = None;
            self.pending_new_profile_name = None;
        }
    }

    fn handle_treeview_item_toggled(
        &mut self,
        window_id: WindowId,
        item_id: TreeItemId,
        new_state: CheckState,
    ) {
        log::debug!(
            "TreeItem {:?} toggled to UI state {:?}.",
            item_id,
            new_state
        );

        let mut path_of_toggled_node: Option<PathBuf> = None;
        for (path_candidate, id_in_map) in &self.path_to_tree_item_id {
            if *id_in_map == item_id {
                path_of_toggled_node = Some(path_candidate.clone());
                break;
            }
        }

        if let Some(path_for_model_update) = path_of_toggled_node {
            {
                let node_to_update_model_for =
                    Self::find_filenode_mut(&mut self.file_nodes_cache, &path_for_model_update);

                if let Some(node_model) = node_to_update_model_for {
                    let new_model_file_state = match new_state {
                        CheckState::Checked => FileState::Selected,
                        CheckState::Unchecked => FileState::Deselected,
                    };
                    self.state_manager
                        .update_folder_selection(node_model, new_model_file_state);
                } else {
                    log::error!(
                        "AppLogic: Model node not found for path {:?} to update state.",
                        path_for_model_update
                    );
                }
            }

            if let Some(root_node_for_visual_update) =
                Self::find_filenode_ref(&self.file_nodes_cache, &path_for_model_update)
            {
                let mut visual_updates_list = Vec::new();
                self.collect_visual_updates_recursive(
                    root_node_for_visual_update,
                    &mut visual_updates_list,
                );
                log::debug!(
                    "Requesting {} visual updates for TreeView after toggle.",
                    visual_updates_list.len()
                );
                for (id_to_update_ui, state_for_ui) in visual_updates_list {
                    self.synchronous_command_queue.push_back(
                        PlatformCommand::UpdateTreeItemVisualState {
                            window_id,
                            item_id: id_to_update_ui,
                            new_state: state_for_ui,
                        },
                    );
                }
            } else {
                log::error!(
                    "AppLogic: Model node not found for path {:?} to collect visual updates.",
                    path_for_model_update
                );
            }
            self.update_current_archive_status();
        } else {
            log::error!(
                "AppLogic: Could not find path for TreeItemId {:?} from UI event.",
                item_id
            );
        }
    }

    fn handle_button_clicked(&mut self, window_id: WindowId, control_id: i32) {
        if self.main_window_id == Some(window_id) && control_id == ID_BUTTON_GENERATE_ARCHIVE_LOGIC
        {
            log::debug!("'Save to Archive' button clicked.");

            if let Some(profile) = &self.current_profile_cache {
                if let Some(archive_path) = &profile.archive_path {
                    let display_root_path = profile.root_folder.clone();
                    match self
                        .archiver
                        .create_archive_content(&self.file_nodes_cache, &display_root_path)
                    {
                        Ok(content) => {
                            match self.archiver.save_archive_content(archive_path, &content) {
                                Ok(_) => {
                                    app_info!(
                                        self,
                                        "Archive successfully saved to '{}'.",
                                        archive_path.display()
                                    );
                                    self.update_current_archive_status();
                                }
                                Err(e) => {
                                    app_error!(
                                        self,
                                        "Failed to save archive content to '{}': {}",
                                        archive_path.display(),
                                        e
                                    );
                                }
                            }
                        }
                        Err(e) => {
                            app_error!(self, "Failed to create archive content: {}", e);
                        }
                    }
                } else {
                    app_error!(
                        self,
                        "No archive path set for current profile. Cannot save archive."
                    );
                }
            } else {
                app_error!(self, "No profile loaded. Cannot save archive.");
            }
        }
    }

    fn handle_menu_load_profile_clicked(&mut self) {
        log::debug!("MenuAction::LoadProfile action received by AppLogic.");
        if let Some(main_id) = self.main_window_id {
            let profile_dir_opt = self
                .profile_manager
                .get_profile_dir_path(APP_NAME_FOR_PROFILES);
            self.synchronous_command_queue
                .push_back(PlatformCommand::ShowOpenFileDialog {
                    window_id: main_id,
                    title: "Load Profile".to_string(),
                    filter_spec: "Profile Files (*.json)\0*.json\0\0".to_string(),
                    initial_dir: profile_dir_opt,
                });
        }
    }

    fn handle_file_open_dialog_completed(&mut self, window_id: WindowId, result: Option<PathBuf>) {
        if self.main_window_id == Some(window_id) {
            if let Some(profile_file_path) = result {
                log::debug!("Profile selected for load: {:?}", profile_file_path);
                match self
                    .profile_manager
                    .load_profile_from_path(&profile_file_path)
                {
                    Ok(loaded_profile) => {
                        let profile_name_clone = loaded_profile.name.clone();
                        log::debug!(
                            "Successfully loaded profile '{}' via manager from path.",
                            loaded_profile.name
                        );
                        self.current_profile_name = Some(loaded_profile.name.clone());
                        self.root_path_for_scan = loaded_profile.root_folder.clone();
                        if let Err(e) = self
                            .config_manager
                            .save_last_profile_name(APP_NAME_FOR_PROFILES, &loaded_profile.name)
                        {
                            // Log error, but don't prevent profile activation
                            app_warn!(
                                self,
                                "Failed to save last profile name '{}': {:?}",
                                loaded_profile.name,
                                e
                            );
                        }
                        let status_msg =
                            format!("Profile '{}' loaded and scanned.", profile_name_clone);
                        self._activate_profile_and_show_window(
                            window_id,
                            loaded_profile,
                            status_msg,
                        );
                    }
                    Err(e) => {
                        app_error!(
                            self,
                            "Failed to load profile from {:?} via manager: {:?}",
                            profile_file_path,
                            e
                        );
                        self.current_profile_name = None;
                        self.current_profile_cache = None;
                        self.current_archive_status = None;
                    }
                }
            } else {
                log::debug!("Load profile cancelled.");
            }
        }
    }

    fn handle_menu_save_profile_as_clicked(&mut self) {
        log::debug!("MenuAction::SaveProfileAs action received by AppLogic.");
        if let Some(main_id) = self.main_window_id {
            let profile_dir_opt = self
                .profile_manager
                .get_profile_dir_path(APP_NAME_FOR_PROFILES);
            let base_name = self
                .current_profile_name
                .as_ref()
                .map_or_else(|| "new_profile".to_string(), |name| name.clone());
            let sanitized_current_name = core::profiles::sanitize_profile_name(&base_name);
            let default_filename = format!("{}.json", sanitized_current_name);

            self.pending_action = Some(PendingAction::SavingProfile);
            self.synchronous_command_queue
                .push_back(PlatformCommand::ShowSaveFileDialog {
                    window_id: main_id,
                    title: "Save Profile As".to_string(),
                    default_filename,
                    filter_spec: "Profile Files (*.json)\0*.json\0\0".to_string(),
                    initial_dir: profile_dir_opt,
                });
        }
    }

    fn handle_file_save_dialog_completed(&mut self, window_id: WindowId, result: Option<PathBuf>) {
        let action = self.pending_action.take();

        match action {
            Some(PendingAction::SettingArchivePath) => {
                if let Some(path) = result {
                    log::debug!("Archive path selected: {:?}", path);
                    if let Some(profile) = &mut self.current_profile_cache {
                        profile.archive_path = Some(path.clone());
                        match self
                            .profile_manager
                            .save_profile(profile, APP_NAME_FOR_PROFILES)
                        {
                            Ok(_) => {
                                app_info!(
                                    self,
                                    "Archive path set to '{}' for profile '{}' and saved.",
                                    path.display(),
                                    profile.name
                                );
                                self._update_window_title_with_profile_and_archive(window_id);
                                self.update_current_archive_status();
                                self._update_save_to_archive_button_state(window_id);
                            }
                            Err(e) => {
                                app_error!(
                                    self,
                                    "Failed to save profile '{}' after setting archive path: {}",
                                    profile.name,
                                    e
                                );
                            }
                        }
                    } else {
                        app_error!(self, "No profile active to set archive path for.");
                    }
                } else {
                    log::debug!("Set archive path cancelled.");
                    self._update_save_to_archive_button_state(window_id);
                }
            }
            Some(PendingAction::SavingArchive) => {
                app_warn!(
                    self,
                    "Obsolete 'SavingArchive' action handled. This should not happen."
                );
                if result.is_none() {
                    log::debug!("Save archive (obsolete path) cancelled.");
                }
            }
            Some(PendingAction::SavingProfile) => {
                if let Some(profile_save_path) = result {
                    log::debug!("Profile save path selected: {:?}", profile_save_path);
                    if let Some(profile_name_osstr) = profile_save_path.file_stem() {
                        if let Some(profile_name_str) =
                            profile_name_osstr.to_str().map(|s| s.to_string())
                        {
                            if profile_name_str.trim().is_empty()
                                || !profile_name_str
                                    .chars()
                                    .all(core::profiles::is_valid_profile_name_char)
                            {
                                app_error!(
                                    self,
                                    "Invalid profile name extracted from path: '{}'. Profile not saved.",
                                    profile_name_str
                                );
                            } else {
                                let mut new_profile = self
                                    .create_profile_from_current_state(profile_name_str.clone());
                                let profile_name_clone = new_profile.name.clone();
                                match self
                                    .profile_manager
                                    .save_profile(&new_profile, APP_NAME_FOR_PROFILES)
                                {
                                    Ok(()) => {
                                        log::debug!(
                                            "Successfully saved profile as '{}' via manager.",
                                            new_profile.name
                                        );
                                        self.current_profile_name = Some(new_profile.name.clone());
                                        self.current_profile_cache = Some(new_profile.clone());
                                        self.root_path_for_scan = self
                                            .current_profile_cache
                                            .as_ref()
                                            .unwrap()
                                            .root_folder
                                            .clone();

                                        self._update_window_title_with_profile_and_archive(
                                            window_id,
                                        );

                                        if let Err(e) = self.config_manager.save_last_profile_name(
                                            APP_NAME_FOR_PROFILES,
                                            &new_profile.name,
                                        ) {
                                            app_warn!(
                                                self,
                                                "Failed to save last profile name '{}': {:?}",
                                                new_profile.name,
                                                e
                                            );
                                        }
                                        self.update_current_archive_status();
                                        self._update_save_to_archive_button_state(window_id);
                                        app_info!(self, "Profile '{}' saved.", profile_name_clone);
                                    }
                                    Err(e) => {
                                        app_error!(
                                            self,
                                            "Failed to save profile (via manager) as '{}': {}",
                                            new_profile.name,
                                            e
                                        );
                                    }
                                }
                            }
                        } else {
                            app_error!(
                                self,
                                "Profile save filename stem not valid UTF-8. Profile not saved."
                            );
                        }
                    } else {
                        app_error!(
                            self,
                            "Could not extract profile name from save path. Profile not saved."
                        );
                    }
                } else {
                    log::debug!("Save profile cancelled.");
                }
            }
            Some(PendingAction::CreatingNewProfileGetName)
            | Some(PendingAction::CreatingNewProfileGetRoot) => {
                app_error!(
                    self,
                    "Unexpected FileSaveDialogCompleted with pending action: {:?}",
                    action
                );
            }
            None => {
                app_warn!(
                    self,
                    "FileSaveDialogCompleted received but no pending action was set."
                );
            }
        }
    }

    fn handle_window_resized(&mut self, _window_id: WindowId, _width: i32, _height: i32) {
        // Currently does not generate commands.
    }

    fn handle_menu_refresh_file_list_clicked(&mut self) {
        log::debug!("MenuAction::RefreshFileList action received by AppLogic.");
        let window_id = match self.main_window_id {
            Some(id) => id,
            None => {
                log::error!("AppLogic: Refresh requested but no main window ID set. Ignoring.");
                return;
            }
        };

        let current_profile_clone = match self.current_profile_cache.clone() {
            Some(profile) => profile,
            None => {
                app_warn!(self, "Refresh: No profile active.");
                return;
            }
        };

        let root_path_to_scan = current_profile_clone.root_folder.clone();
        log::debug!(
            "Refreshing file list for profile '{}', root: {:?}",
            current_profile_clone.name,
            root_path_to_scan
        );

        match self.file_system_scanner.scan_directory(&root_path_to_scan) {
            Ok(new_nodes) => {
                self.file_nodes_cache = new_nodes;
                log::debug!(
                    "Scan successful, {} top-level nodes found.",
                    self.file_nodes_cache.len()
                );

                self.state_manager
                    .apply_profile_to_tree(&mut self.file_nodes_cache, &current_profile_clone);
                log::debug!(
                    "Applied profile '{}' to refreshed tree.",
                    current_profile_clone.name
                );

                self.refresh_tree_view_from_cache(window_id);
                self.update_current_archive_status();
                app_info!(
                    self,
                    "File list refreshed for profile '{}'.",
                    current_profile_clone.name
                );
            }
            Err(e) => {
                app_error!(self, "Failed to refresh file list: {}", e);
            }
        }
    }

    fn _activate_profile_and_show_window(
        &mut self,
        window_id: WindowId,
        profile_to_activate: Profile,
        operation_status_message: String, // This is the initial success/creation message
    ) {
        self.current_profile_name = Some(profile_to_activate.name.clone());
        self.root_path_for_scan = profile_to_activate.root_folder.clone();
        self.current_profile_cache = Some(profile_to_activate.clone());

        log::debug!(
            "Activating profile '{}'. Scanning directory: {:?}",
            self.current_profile_name.as_ref().unwrap(),
            self.root_path_for_scan
        );

        self._update_window_title_with_profile_and_archive(window_id);

        let mut final_status_message = operation_status_message; // Start with the passed-in message
        let mut final_status_severity = MessageSeverity::Information;

        match self
            .file_system_scanner
            .scan_directory(&self.root_path_for_scan)
        {
            Ok(nodes) => {
                self.file_nodes_cache = nodes;
                log::debug!(
                    "Scanned {} top-level nodes for active profile.",
                    self.file_nodes_cache.len()
                );
                self.state_manager
                    .apply_profile_to_tree(&mut self.file_nodes_cache, &profile_to_activate);
                log::debug!(
                    "Applied active profile '{}' to the scanned tree.",
                    profile_to_activate.name
                );
            }
            Err(e) => {
                let err_msg_scan = format!(
                    "Failed to scan directory {:?} for profile '{}': {}",
                    self.root_path_for_scan, profile_to_activate.name, e
                );
                // This error is more critical than the initial "profile loaded" message.
                final_status_message = err_msg_scan;
                final_status_severity = MessageSeverity::Error;
                self.file_nodes_cache.clear();
            }
        }

        self.refresh_tree_view_from_cache(window_id);

        // Send the determined final status message
        match final_status_severity {
            MessageSeverity::Error => app_error!(self, "{}", final_status_message),
            MessageSeverity::Warning => app_warn!(self, "{}", final_status_message),
            _ => app_info!(self, "{}", final_status_message),
        }

        self.update_current_archive_status();
        self._update_save_to_archive_button_state(window_id);

        self.synchronous_command_queue
            .push_back(PlatformCommand::ShowWindow { window_id });
    }

    pub(crate) fn initiate_profile_selection_or_creation(&mut self, window_id: WindowId) {
        log::debug!("Initiating profile selection or creation flow.");

        match self.profile_manager.list_profiles(APP_NAME_FOR_PROFILES) {
            Ok(available_profiles) => {
                let (title, prompt, emphasize_create_new) = if available_profiles.is_empty() {
                    (
                        "Welcome to SourcePacker!".to_string(),
                        "No profiles found. Please create a new profile to get started."
                            .to_string(),
                        true,
                    )
                } else {
                    (
                        "Select or Create Profile".to_string(),
                        "Please select an existing profile, or create a new one.".to_string(),
                        false,
                    )
                };
                log::debug!(
                    "Found {} available profiles. Dialog prompt: '{}'",
                    available_profiles.len(),
                    prompt
                );
                self.synchronous_command_queue.push_back(
                    PlatformCommand::ShowProfileSelectionDialog {
                        window_id,
                        available_profiles,
                        title,
                        prompt,
                        emphasize_create_new,
                    },
                );
            }
            Err(e) => {
                app_error!(
                    self,
                    "Failed to list profiles: {:?}. Cannot proceed with profile selection.",
                    e
                );
            }
        }
    }

    fn handle_profile_selection_dialog_completed(
        &mut self,
        window_id: WindowId,
        chosen_profile_name: Option<String>,
        create_new_requested: bool,
        user_cancelled: bool,
    ) {
        log::debug!(
            "ProfileSelectionDialogCompleted event received: chosen: {:?}, create_new: {}, cancelled: {}",
            chosen_profile_name,
            create_new_requested,
            user_cancelled
        );

        if user_cancelled {
            log::debug!("Profile selection was cancelled by user. Quitting application.");
            self.synchronous_command_queue
                .push_back(PlatformCommand::QuitApplication);
            return;
        }

        if create_new_requested {
            log::debug!("User requested to create a new profile.");
            self.start_new_profile_creation_flow(window_id);
        } else if let Some(profile_name) = chosen_profile_name {
            log::debug!("User chose profile '{}'. Attempting to load.", profile_name);
            match self
                .profile_manager
                .load_profile(&profile_name, APP_NAME_FOR_PROFILES)
            {
                Ok(profile) => {
                    log::debug!("Successfully loaded chosen profile '{}'.", profile.name);
                    let operation_status_message = format!("Profile '{}' loaded.", profile.name);
                    if let Err(e) = self
                        .config_manager
                        .save_last_profile_name(APP_NAME_FOR_PROFILES, &profile.name)
                    {
                        app_warn!(
                            self,
                            "Failed to save last profile name '{}': {:?}",
                            profile.name,
                            e
                        );
                    }
                    self._activate_profile_and_show_window(
                        window_id,
                        profile,
                        operation_status_message,
                    );
                }
                Err(e) => {
                    app_error!(
                        self,
                        "Could not load profile '{}': {:?}. Please try again or create a new one.",
                        profile_name,
                        e
                    );
                    self.initiate_profile_selection_or_creation(window_id);
                }
            }
        } else {
            app_warn!(
                self,
                "ProfileSelectionDialogCompleted in unexpected state (no choice, not create, not cancelled). Re-initiating."
            );
            self.initiate_profile_selection_or_creation(window_id);
        }
    }

    fn start_new_profile_creation_flow(&mut self, window_id: WindowId) {
        log::debug!("Starting new profile creation flow (Step 1: Get Name).");
        self.pending_action = Some(PendingAction::CreatingNewProfileGetName);
        self.synchronous_command_queue
            .push_back(PlatformCommand::ShowInputDialog {
                window_id,
                title: "New Profile (1/2): Name".to_string(),
                prompt: "Enter a name for the new profile:".to_string(),
                default_text: None,
                context_tag: Some("NewProfileName".to_string()),
            });
    }

    fn handle_input_dialog_completed(
        &mut self,
        window_id: WindowId,
        text: Option<String>,
        context_tag: Option<String>,
    ) {
        log::debug!(
            "InputDialogCompleted: text: {:?}, context_tag: {:?}",
            text,
            context_tag
        );

        match context_tag.as_deref() {
            Some("NewProfileName") => {
                if let Some(profile_name) = text {
                    if profile_name.trim().is_empty()
                        || !profile_name
                            .chars()
                            .all(core::profiles::is_valid_profile_name_char)
                    {
                        app_warn!(
                            self,
                            "Invalid profile name. Please use only letters, numbers, spaces, underscores, or hyphens."
                        );
                        self.synchronous_command_queue.push_back(
                            PlatformCommand::ShowInputDialog {
                                window_id,
                                title: "New Profile (1/2): Name".to_string(),
                                prompt:
                                    "Enter a name for the new profile (invalid previous attempt):"
                                        .to_string(),
                                default_text: Some(profile_name),
                                context_tag: Some("NewProfileName".to_string()),
                            },
                        );
                        return;
                    }
                    log::debug!(
                        "New profile name '{}' is valid. Proceeding to Step 2 (Get Root Folder).",
                        profile_name
                    );
                    self.pending_new_profile_name = Some(profile_name);
                    self.pending_action = Some(PendingAction::CreatingNewProfileGetRoot);
                    self.synchronous_command_queue.push_back(
                        PlatformCommand::ShowFolderPickerDialog {
                            window_id,
                            title: "New Profile (2/2): Select Root Folder".to_string(),
                            initial_dir: None,
                        },
                    );
                } else {
                    log::debug!(
                        "New profile name input cancelled. Returning to profile selection."
                    );
                    self.pending_action = None;
                    self.pending_new_profile_name = None;
                    self.initiate_profile_selection_or_creation(window_id);
                }
            }
            _ => {
                app_warn!(
                    self,
                    "InputDialogCompleted with unhandled context: {:?}",
                    context_tag
                );
                self.pending_action = None;
            }
        }
    }

    fn handle_folder_picker_dialog_completed(
        &mut self,
        window_id: WindowId,
        path: Option<PathBuf>,
    ) {
        log::debug!("FolderPickerDialogCompleted: path: {:?}", path);
        self.pending_action = None;

        if let Some(root_folder_path) = path {
            if let Some(profile_name) = self.pending_new_profile_name.take() {
                log::debug!(
                    "Creating new profile '{}' with root folder {:?}.",
                    profile_name,
                    root_folder_path
                );
                let new_profile = Profile::new(profile_name.clone(), root_folder_path.clone());

                match self
                    .profile_manager
                    .save_profile(&new_profile, APP_NAME_FOR_PROFILES)
                {
                    Ok(_) => {
                        log::debug!("Successfully saved new profile '{}'.", new_profile.name);
                        let operation_status_message =
                            format!("New profile '{}' created and loaded.", new_profile.name);

                        if let Err(e) = self
                            .config_manager
                            .save_last_profile_name(APP_NAME_FOR_PROFILES, &new_profile.name)
                        {
                            app_warn!(
                                self,
                                "Failed to save last profile name '{}': {:?}",
                                new_profile.name,
                                e
                            );
                        }
                        self._activate_profile_and_show_window(
                            window_id,
                            new_profile,
                            operation_status_message,
                        );
                    }
                    Err(e) => {
                        app_error!(
                            self,
                            "Failed to save new profile '{}': {:?}. Please try again.",
                            profile_name,
                            e
                        );
                        self.initiate_profile_selection_or_creation(window_id);
                    }
                }
            } else {
                app_warn!(
                    self,
                    "FolderPickerDialogCompleted but no pending profile name. Re-initiating profile selection."
                );
                self.initiate_profile_selection_or_creation(window_id);
            }
        } else {
            log::debug!("Root folder selection cancelled. Returning to profile selection.");
            self.pending_new_profile_name = None;
            self.initiate_profile_selection_or_creation(window_id);
        }
    }

    fn _update_window_title_with_profile_and_archive(&mut self, window_id: WindowId) {
        let mut title = "SourcePacker".to_string();
        if let Some(profile) = &self.current_profile_cache {
            title = format!("{} - [{}]", title, profile.name);
            if let Some(archive_path) = &profile.archive_path {
                title = format!("{} - [{}]", title, archive_path.display());
            } else {
                title = format!("{} - [No Archive Set]", title);
            }
        }
        self.synchronous_command_queue
            .push_back(PlatformCommand::SetWindowTitle { window_id, title });
    }

    fn _update_save_to_archive_button_state(&mut self, window_id: WindowId) {
        let enabled = self
            .current_profile_cache
            .as_ref()
            .and_then(|p| p.archive_path.as_ref())
            .is_some();

        self.synchronous_command_queue
            .push_back(PlatformCommand::SetControlEnabled {
                window_id,
                control_id: ID_BUTTON_GENERATE_ARCHIVE_LOGIC,
                enabled,
            });
        if !enabled {
            log::debug!("Button 'Save to Archive' disabled: No archive path set in profile.");
        }
    }

    fn handle_menu_set_archive_path_clicked(&mut self) {
        if let Some(main_id) = self.main_window_id {
            log::debug!("MenuAction::SetArchivePath action received by AppLogic.");
            if self.current_profile_cache.is_some() {
                self.pending_action = Some(PendingAction::SettingArchivePath);

                let default_filename = self
                    .current_profile_cache
                    .as_ref()
                    .and_then(|p| p.archive_path.as_ref().and_then(|ap| ap.file_name()))
                    .map(|os_name| os_name.to_string_lossy().into_owned())
                    .unwrap_or_else(|| {
                        self.current_profile_cache
                            .as_ref()
                            .map(|p| core::profiles::sanitize_profile_name(&p.name) + ".txt")
                            .unwrap_or_else(|| "archive.txt".to_string())
                    });

                let initial_dir_for_dialog = self
                    .current_profile_cache
                    .as_ref()
                    .and_then(|p| {
                        p.archive_path
                            .as_ref()
                            .and_then(|ap| ap.parent().map(PathBuf::from))
                    })
                    .or_else(|| {
                        self.current_profile_cache
                            .as_ref()
                            .map(|p| p.root_folder.clone())
                    });

                self.synchronous_command_queue
                    .push_back(PlatformCommand::ShowSaveFileDialog {
                        window_id: main_id,
                        title: "Set Archive File Path".to_string(),
                        default_filename,
                        filter_spec: "Text Files (*.txt)\0*.txt\0All Files (*.*)\0*.*\0\0"
                            .to_string(),
                        initial_dir: initial_dir_for_dialog,
                    });
            } else {
                app_warn!(self, "Cannot set archive path: No profile is active.");
            }
        }
    }
}

impl PlatformEventHandler for MyAppLogic {
    fn try_dequeue_command(&mut self) -> Option<PlatformCommand> {
        self.synchronous_command_queue.pop_front()
    }

    fn handle_event(&mut self, event: AppEvent) {
        match event {
            AppEvent::WindowCloseRequestedByUser { window_id } => {
                self.handle_window_close_requested(window_id);
            }
            AppEvent::WindowDestroyed { window_id } => {
                self.handle_window_destroyed(window_id);
            }
            AppEvent::TreeViewItemToggledByUser {
                window_id,
                item_id,
                new_state,
            } => {
                self.handle_treeview_item_toggled(window_id, item_id, new_state);
            }
            AppEvent::ButtonClicked {
                window_id,
                control_id,
            } => {
                self.handle_button_clicked(window_id, control_id);
            }
            AppEvent::MenuActionClicked {
                window_id: _,
                action,
            } => {
                // window_id is available if needed
                match action {
                    MenuAction::LoadProfile => self.handle_menu_load_profile_clicked(),
                    MenuAction::SaveProfileAs => self.handle_menu_save_profile_as_clicked(),
                    MenuAction::SetArchivePath => self.handle_menu_set_archive_path_clicked(),
                    MenuAction::RefreshFileList => self.handle_menu_refresh_file_list_clicked(),
                }
            }
            AppEvent::FileOpenProfileDialogCompleted { window_id, result } => {
                self.handle_file_open_dialog_completed(window_id, result);
            }
            AppEvent::FileSaveDialogCompleted { window_id, result } => {
                self.handle_file_save_dialog_completed(window_id, result);
            }
            AppEvent::WindowResized {
                window_id,
                width,
                height,
            } => {
                self.handle_window_resized(window_id, width, height);
            }
            AppEvent::ProfileSelectionDialogCompleted {
                window_id,
                chosen_profile_name,
                create_new_requested,
                user_cancelled,
            } => {
                self.handle_profile_selection_dialog_completed(
                    window_id,
                    chosen_profile_name,
                    create_new_requested,
                    user_cancelled,
                );
            }
            AppEvent::GenericInputDialogCompleted {
                window_id,
                text,
                context_tag,
            } => {
                self.handle_input_dialog_completed(window_id, text, context_tag);
            }
            AppEvent::FolderPickerDialogCompleted { window_id, path } => {
                self.handle_folder_picker_dialog_completed(window_id, path);
            }
            AppEvent::MainWindowUISetupComplete { window_id } => {
                self._on_ui_setup_complete(window_id);
            }
        }
    }

    fn on_quit(&mut self) {
        log::debug!("AppLogic: on_quit called by platform. Application is exiting.");

        if let Some(active_profile_name) = self.current_profile_name.clone() {
            if !active_profile_name.is_empty() {
                let profile_to_save =
                    self.create_profile_from_current_state(active_profile_name.clone());
                log::debug!(
                    "AppLogic: Attempting to save content of active profile '{}' on exit.",
                    active_profile_name
                );
                match self
                    .profile_manager
                    .save_profile(&profile_to_save, APP_NAME_FOR_PROFILES)
                {
                    Ok(_) => log::debug!(
                        "AppLogic: Successfully saved content of profile '{}' to disk on exit.",
                        active_profile_name
                    ),
                    Err(e) => log::error!(
                        "AppLogic: Error saving content of profile '{}' on exit: {:?}",
                        active_profile_name,
                        e
                    ),
                }
            }
        }

        let profile_name_to_save_in_config = self.current_profile_name.as_deref().unwrap_or("");
        log::debug!(
            "AppLogic: Attempting to save last profile name '{}' to config on exit.",
            profile_name_to_save_in_config
        );
        match self
            .config_manager
            .save_last_profile_name(APP_NAME_FOR_PROFILES, profile_name_to_save_in_config)
        {
            Ok(_) => {
                if profile_name_to_save_in_config.is_empty() {
                    log::debug!(
                        "AppLogic: Successfully cleared/unset last profile name in config on exit."
                    );
                } else {
                    log::debug!(
                        "AppLogic: Successfully saved last active profile name '{}' to config on exit.",
                        profile_name_to_save_in_config
                    );
                }
            }
            Err(e) => log::error!(
                "AppLogic: Error saving last profile name to config on exit: {:?}",
                e
            ),
        }
    }

    fn as_any_mut(&mut self) -> &mut dyn std::any::Any {
        self
    }
}

#[cfg(test)]
impl MyAppLogic {
    pub(crate) fn test_main_window_id(&self) -> Option<WindowId> {
        self.main_window_id
    }
    pub(crate) fn test_set_main_window_id(&mut self, v: Option<WindowId>) {
        self.main_window_id = v;
    }

    pub(crate) fn test_file_nodes_cache(&mut self) -> &mut Vec<FileNode> {
        &mut self.file_nodes_cache
    }
    pub(crate) fn test_set_file_nodes_cache(&mut self, v: Vec<FileNode>) {
        self.file_nodes_cache = v;
    }
    pub(crate) fn test_find_filenode_mut(&mut self, path_to_find: &Path) -> Option<&mut FileNode> {
        return Self::find_filenode_mut(&mut self.file_nodes_cache, path_to_find);
    }

    pub(crate) fn test_path_to_tree_item_id(&self) -> &PathToTreeItemIdMap {
        &self.path_to_tree_item_id
    }
    #[allow(dead_code)]
    pub(crate) fn test_set_path_to_tree_item_id(&mut self, v: PathToTreeItemIdMap) {
        self.path_to_tree_item_id = v;
    }
    pub(crate) fn test_path_to_tree_item_id_clear(&mut self) {
        self.next_tree_item_id_counter = 1;
        self.path_to_tree_item_id.clear();
    }
    pub(crate) fn test_path_to_tree_item_id_insert(&mut self, path: &PathBuf, id: TreeItemId) {
        self.path_to_tree_item_id.insert(path.to_path_buf(), id);
    }
    #[allow(dead_code)]
    pub(crate) fn test_next_tree_item_id_counter(&self) -> u64 {
        self.next_tree_item_id_counter
    }
    #[allow(dead_code)]
    pub(crate) fn test_set_next_tree_item_id_counter(&mut self, v: u64) {
        self.next_tree_item_id_counter = v;
    }

    pub(crate) fn test_root_path_for_scan(&self) -> &PathBuf {
        &self.root_path_for_scan
    }
    pub(crate) fn test_set_root_path_for_scan(&mut self, v: PathBuf) {
        self.root_path_for_scan = v;
    }
    #[allow(dead_code)]
    pub(crate) fn test_root_path_for_scan_set(&mut self, v: &Path) {
        // Added for convenience
        self.root_path_for_scan = v.to_path_buf();
    }

    pub(crate) fn test_current_profile_name(&self) -> &Option<String> {
        &self.current_profile_name
    }
    pub(crate) fn test_set_current_profile_name(&mut self, v: Option<String>) {
        self.current_profile_name = v;
    }
    #[allow(dead_code)]
    pub(crate) fn test_current_set(
        // Added for convenience
        &mut self,
        name: Option<String>,
        cache: Option<Profile>,
        status: Option<ArchiveStatus>,
    ) {
        self.current_profile_name = name;
        self.current_profile_cache = cache;
        self.current_archive_status = status;
    }

    pub(crate) fn test_current_profile_cache(&self) -> &Option<Profile> {
        &self.current_profile_cache
    }
    pub(crate) fn test_set_current_profile_cache(&mut self, v: Option<Profile>) {
        self.current_profile_cache = v;
    }

    pub(crate) fn test_current_archive_status(&self) -> &Option<ArchiveStatus> {
        &self.current_archive_status
    }
    pub(crate) fn test_set_current_archive_status(&mut self, v: Option<ArchiveStatus>) {
        self.current_archive_status = v;
    }

    pub(crate) fn test_pending_action(&self) -> &Option<PendingAction> {
        &self.pending_action
    }
    pub(crate) fn test_set_pending_action(&mut self, v: PendingAction) {
        self.pending_action = Some(v);
    }

    pub(crate) fn test_pending_new_profile_name(&self) -> &Option<String> {
        &self.pending_new_profile_name
    }
    pub(crate) fn test_set_pending_new_profile_name(&mut self, v: Option<String>) {
        self.pending_new_profile_name = v;
    }

    #[allow(dead_code)]
    pub(crate) fn test_config_manager(&self) -> &Arc<dyn ConfigManagerOperations> {
        &self.config_manager
    }
    #[allow(dead_code)]
    pub(crate) fn test_set_config_manager(&mut self, v: Arc<dyn ConfigManagerOperations>) {
        self.config_manager = v;
    }
    #[allow(dead_code)]
    pub(crate) fn test_profile_manager(&self) -> &Arc<dyn ProfileManagerOperations> {
        &self.profile_manager
    }
    #[allow(dead_code)]
    pub(crate) fn test_set_profile_manager(&mut self, v: Arc<dyn ProfileManagerOperations>) {
        self.profile_manager = v;
    }
    #[allow(dead_code)]
    pub(crate) fn test_file_system_scanner(&self) -> &Arc<dyn FileSystemScannerOperations> {
        &self.file_system_scanner
    }
    #[allow(dead_code)]
    pub(crate) fn test_set_file_system_scanner(&mut self, v: Arc<dyn FileSystemScannerOperations>) {
        self.file_system_scanner = v;
    }
    #[allow(dead_code)]
    pub(crate) fn test_archiver(&self) -> &Arc<dyn ArchiverOperations> {
        &self.archiver
    }
    #[allow(dead_code)]
    pub(crate) fn test_set_archiver(&mut self, v: Arc<dyn ArchiverOperations>) {
        self.archiver = v;
    }
    #[allow(dead_code)]
    pub(crate) fn test_state_manager(&self) -> &Arc<dyn StateManagerOperations> {
        &self.state_manager
    }
    #[allow(dead_code)]
    pub(crate) fn test_set_state_manager(&mut self, v: Arc<dyn StateManagerOperations>) {
        self.state_manager = v;
    }

    pub(crate) fn test_drain_commands(&mut self) -> Vec<PlatformCommand> {
        self.synchronous_command_queue.drain(..).collect()
    }
}
