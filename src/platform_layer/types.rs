use std::path::PathBuf;
/// An opaque identifier for a native window, managed by the platform layer.
///
/// The application logic layer uses this ID to refer to specific windows
/// when sending commands or receiving events, without needing to know about
/// native window handles like HWND.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct WindowId(pub(crate) usize); // pub(crate) for internal platform use

/// An opaque identifier for an item within a tree-like control (e.g., TreeView).
///
/// This ID is generated and managed by the application logic layer and used to
/// uniquely identify tree items in commands and events. The platform layer
/// maps this to native tree item handles.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct TreeItemId(pub u64);

// --- Data Structures for UI Description (Platform-Agnostic) ---

/// Configuration for creating a new native window.
///
/// Provided by the application logic to the platform layer, describing
/// the desired properties of a window without specifying native details.
#[derive(Debug, Clone)]
pub struct WindowConfig<'a> {
    pub title: &'a str,
    pub width: i32,
    pub height: i32,
    // Future: pub parent: Option<WindowId>, pub has_menu: bool, etc.
}

/// Represents the visual check state of an item, typically a checkbox.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum CheckState {
    Checked,
    Unchecked,
    // Indeterminate, // Requires custom drawing or specific control versions.
}

/// Describes a single item to be displayed in a tree-like control.
///
/// This structure is used by the application logic to define the content
/// and hierarchy of a tree view, which the platform layer then renders.
#[derive(Debug, Clone)]
pub struct TreeItemDescriptor {
    /// A unique identifier for this item, provided by the application logic.
    pub id: TreeItemId,
    pub text: String,
    pub is_folder: bool,
    pub state: CheckState,
    pub children: Vec<TreeItemDescriptor>,
}

// --- Events from Platform to App Logic ---

/// Represents platform-agnostic UI events generated by the native toolkit.
///
/// The platform layer translates native OS events into these types and
/// sends them to the application logic layer for handling.
#[derive(Debug)]
pub enum AppEvent {
    /// Signals that the user has requested to close a window (e.g., clicked the 'X' button).
    /// The application logic should decide whether to allow the close.
    WindowCloseRequested {
        window_id: WindowId,
    },
    /// Signals that a window has been resized.
    WindowResized {
        window_id: WindowId,
        width: i32,
        height: i32,
    },
    /// Signals that a window and its native resources have been destroyed.
    /// The `WindowId` should be considered invalid after this event.
    WindowDestroyed {
        window_id: WindowId,
    },
    /// Signals that a tree view item's check state has been changed by user interaction.
    TreeViewItemToggled {
        window_id: WindowId,
        item_id: TreeItemId,
        new_state: CheckState,
    },
    /// Signals that a button was clicked.
    ButtonClicked {
        window_id: WindowId,
        control_id: i32, // Using the raw control ID for now
    },
    /// Signals the result of a "Save File" dialog.
    FileSaveDialogCompleted {
        window_id: WindowId,
        result: Option<std::path::PathBuf>, // Some(path) if successful, None if cancelled
    },
    MenuLoadProfileClicked,
    MenuSaveProfileAsClicked,
    FileOpenDialogCompleted {
        // Specifically for loading profiles
        window_id: WindowId,
        result: Option<PathBuf>,
    },
}

// --- Commands from App Logic to Platform ---

/// Represents platform-agnostic commands sent from the application logic to the platform layer.
///
/// These commands instruct the platform layer to perform specific actions on
/// native UI elements.
#[derive(Debug)]
pub enum PlatformCommand {
    /// Sets the title of a specified window.
    SetWindowTitle { window_id: WindowId, title: String },
    /// Makes a specified window visible.
    ShowWindow { window_id: WindowId },
    /// Instructs the platform layer to initiate the closing process for a window.
    /// This typically results in a `WM_CLOSE` message being sent to the native window.
    CloseWindow { window_id: WindowId },
    /// Populates a tree view control within a specified window with a new set of items.
    /// Any existing items in the tree view are typically cleared first.
    PopulateTreeView {
        window_id: WindowId,
        items: Vec<TreeItemDescriptor>,
    },
    /// Updates the check state of a specific item in a tree view.
    UpdateTreeItemVisualState {
        window_id: WindowId,
        item_id: TreeItemId,
        new_state: CheckState,
    },
    ShowSaveFileDialog {
        window_id: WindowId,
        title: String,
        default_filename: String,
        /// Example: "Text Files (*.txt)\0*.txt\0All Files (*.*)\0*.*\0\0"
        filter_spec: String,
        initial_dir: Option<PathBuf>,
    },
    ShowOpenFileDialog {
        window_id: WindowId,
        title: String,
        filter_spec: String,
        initial_dir: Option<PathBuf>,
    },
    UpdateStatusBarText {
        window_id: WindowId,
        text: String,
        is_error: bool,
    },
}

// --- Trait for App Logic to Handle Events ---

/// A trait to be implemented by the application logic layer to handle UI events.
///
/// The platform layer calls methods on this trait to notify the application
/// logic about user interactions or system events.
pub trait PlatformEventHandler: Send + Sync + 'static {
    /// Called by the platform layer when a native UI event has been processed.
    ///
    /// The implementor should handle the event and can optionally return a list
    /// of `PlatformCommand`s to be executed by the platform layer in response.
    fn handle_event(&mut self, event: AppEvent) -> Vec<PlatformCommand>;

    /// Called by the platform layer when the application is about to exit its main loop.
    /// This allows the application logic to perform any necessary cleanup.
    fn on_quit(&mut self) {} // Default empty implementation
}
