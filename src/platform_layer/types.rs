use std::any::Any;
use std::path::PathBuf;

/// An opaque identifier for a native window, managed by the platform layer.
///
/// The application logic layer uses this ID to refer to specific windows
/// when sending commands or receiving events, without needing to know about
/// native window handles like HWND.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct WindowId(pub(crate) usize);

/// An opaque identifier for an item within a tree-like control (e.g., TreeView).
///
/// This ID is generated and managed by the application logic layer and used to
/// uniquely identify tree items in commands and events. The platform layer
/// maps this to native tree item handles.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct TreeItemId(pub u64);

// --- Data Structures for UI Description (Platform-Agnostic) ---

/// Configuration for creating a new native window.
///
/// Provided by the application logic to the platform layer, describing
/// the desired properties of a window without specifying native details.
#[derive(Debug, Clone)]
pub struct WindowConfig<'a> {
    pub title: &'a str,
    pub width: i32,
    pub height: i32,
}

/// Represents the visual check state of an item, typically a checkbox.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum CheckState {
    Checked,
    Unchecked,
}

/// Describes a single item to be displayed in a tree-like control.
///
/// This structure is used by the application logic to define the content
/// and hierarchy of a tree view, which the platform layer then renders.
#[derive(Debug, Clone)]
pub struct TreeItemDescriptor {
    pub id: TreeItemId,
    pub text: String,
    pub is_folder: bool,
    pub state: CheckState,
    pub children: Vec<TreeItemDescriptor>,
}

// --- Events from Platform to App Logic ---

/// Represents platform-agnostic UI events generated by the native toolkit.
///
/// The platform layer translates native OS events into these types and
/// sends them to the application logic layer for handling.
#[derive(Debug)]
pub enum AppEvent {
    /// Signals that the user has requested to close a window (e.g., clicked the 'X' button).
    /// The application logic should decide whether to allow the close.
    WindowCloseRequested {
        window_id: WindowId,
    },
    /// Signals that a window has been resized.
    WindowResized {
        window_id: WindowId,
        width: i32,
        height: i32,
    },
    /// Signals that a window and its native resources have been destroyed.
    /// The `WindowId` should be considered invalid after this event.
    WindowDestroyed {
        window_id: WindowId,
    },
    /// Signals that a tree view item's check state has been changed by user interaction.
    TreeViewItemToggled {
        window_id: WindowId,
        item_id: TreeItemId,
        new_state: CheckState,
    },
    /// Signals that a button was clicked.
    ButtonClicked {
        window_id: WindowId,
        control_id: i32,
    },
    /// Signals the result of a "Save File" dialog.
    FileSaveDialogCompleted {
        window_id: WindowId,
        result: Option<std::path::PathBuf>,
    },
    MenuLoadProfileClicked,
    MenuSaveProfileAsClicked,
    FileOpenDialogCompleted {
        // Specifically for loading profiles
        window_id: WindowId,
        result: Option<PathBuf>,
    },
    /// Result of the profile selection dialog shown at startup or when switching profiles.
    ProfileSelectionDialogCompleted {
        window_id: WindowId,
        chosen_profile_name: Option<String>,
        create_new_requested: bool,
        user_cancelled: bool,
    },
    /// Result of a generic input dialog.
    InputDialogCompleted {
        window_id: WindowId,
        text: Option<String>,
        context_tag: Option<String>,
    },
    /// Result of a folder picker dialog.
    FolderPickerDialogCompleted {
        window_id: WindowId,
        path: Option<PathBuf>,
    },
}

// --- Commands from App Logic to Platform ---

/// Represents platform-agnostic commands sent from the application logic to the platform layer.
///
/// These commands instruct the platform layer to perform specific actions on
/// native UI elements.
#[derive(Debug)]
pub enum PlatformCommand {
    SetWindowTitle {
        window_id: WindowId,
        title: String,
    },
    ShowWindow {
        window_id: WindowId,
    },
    CloseWindow {
        window_id: WindowId,
    },
    PopulateTreeView {
        window_id: WindowId,
        items: Vec<TreeItemDescriptor>,
    },
    UpdateTreeItemVisualState {
        window_id: WindowId,
        item_id: TreeItemId,
        new_state: CheckState,
    },
    ShowSaveFileDialog {
        window_id: WindowId,
        title: String,
        default_filename: String,
        filter_spec: String,
        initial_dir: Option<PathBuf>,
    },
    ShowOpenFileDialog {
        window_id: WindowId,
        title: String,
        filter_spec: String,
        initial_dir: Option<PathBuf>,
    },
    UpdateStatusBarText {
        window_id: WindowId,
        text: String,
        is_error: bool,
    },
    ShowProfileSelectionDialog {
        window_id: WindowId,
        available_profiles: Vec<String>,
        title: String,
        prompt: String,
        emphasize_create_new: bool,
    },
    ShowInputDialog {
        window_id: WindowId,
        title: String,
        prompt: String,
        default_text: Option<String>,
        context_tag: Option<String>,
    },
    ShowFolderPickerDialog {
        window_id: WindowId,
        title: String,
        initial_dir: Option<PathBuf>,
    },
    QuitApplication,
}

// --- Trait for App Logic to Handle Events ---

/// A trait to be implemented by the application logic layer to handle UI events.
///
/// The platform layer calls methods on this trait to notify the application
/// logic about user interactions or system events.
pub trait PlatformEventHandler: Send + Sync + 'static {
    /// Called by the platform layer when a native UI event has been processed.
    /// The implementor should handle the event and enqueue `PlatformCommand`s
    /// for the platform layer to execute.
    fn handle_event(&mut self, event: AppEvent); // Return type changed to ()

    /// Called by the platform layer when the application is about to exit its main loop.
    /// This allows the application logic to perform any necessary cleanup.
    fn on_quit(&mut self) {}

    /// Provides a way to get `&mut dyn Any` for downcasting, if necessary.
    fn as_any_mut(&mut self) -> &mut dyn Any;

    /// Attempts to dequeue a single `PlatformCommand` from the internal queue.
    /// This is called by the platform layer's run loop.
    fn try_dequeue_command(&mut self) -> Option<PlatformCommand>;
}
