use std::any::Any;
use std::path::PathBuf;

/*
 * This module defines core data types used for communication between the
 * application logic and the platform layer. It includes identifiers for windows
 * and tree items, configurations for UI elements (windows, menus),
 * platform-agnostic event types (`AppEvent`), commands for the platform layer
 * (`PlatformCommand`), severity levels for messages (`MessageSeverity`),
 * and semantic identifiers for menu actions (`MenuAction`). It also defines the
 * `PlatformEventHandler` trait that the application logic must implement.
 */

// An opaque identifier for a native window, managed by the platform layer.
//
// The application logic layer uses this ID to refer to specific windows
// when sending commands or receiving events, without needing to know about
// native window handles like HWND.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct WindowId(pub(crate) usize);

// An opaque identifier for an item within a tree-like control (e.g., TreeView).
//
// This ID is generated and managed by the application logic layer and used to
// uniquely identify tree items in commands and events. The platform layer
// maps this to native tree item handles.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct TreeItemId(pub u64);

/*
 * Represents logical menu actions in a platform-agnostic way.
 * This enum is used in `MenuItemConfig` and `AppEvent` to identify menu
 * actions semantically, rather than relying on raw `i32` control IDs.
 * The platform layer will manage the mapping from these actions to
 * dynamically assigned native menu item IDs.
 */
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum MenuAction {
    LoadProfile,
    SaveProfileAs,
    SetArchivePath,
    RefreshFileList,
    // Add other distinct menu actions here as they are identified or needed.
    // For example: ExitApplication, OpenSettings, ShowHelpAbout, etc.
}

// Configuration for creating a new native window.
//
// Provided by the application logic to the platform layer, describing
// the desired properties of a window without specifying native details.
#[derive(Debug, Clone)]
pub struct WindowConfig<'a> {
    pub title: &'a str,
    pub width: i32,
    pub height: i32,
}

// Represents the visual check state of an item, typically a checkbox.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum CheckState {
    Checked,
    Unchecked,
}

// Describes a single item to be displayed in a tree-like control.
//
// This structure is used by the application logic to define the content
// and hierarchy of a tree view, which the platform layer then renders.
#[derive(Debug, Clone)]
pub struct TreeItemDescriptor {
    pub id: TreeItemId,
    pub text: String,
    pub is_folder: bool,
    pub state: CheckState,
    pub children: Vec<TreeItemDescriptor>,
}

// Configuration for a single menu item, used by `PlatformCommand::CreateMainMenu`.
//
// Describes the properties of a menu item, including its ID for event handling,
// display text, and any sub-menu items.
#[derive(Debug, Clone)]
pub struct MenuItemConfig {
    pub id: i32, // Menu item ID (e.g., ID_MENU_FILE_LOAD_PROFILE)
    pub text: String,
    pub children: Vec<MenuItemConfig>, // For submenus
}

// --- Events from Platform to App Logic ---

// Represents platform-agnostic UI events generated by the native toolkit.
//
// The platform layer translates native OS events into these types and
// sends them to the application logic layer for handling.
#[derive(Debug)]
pub enum AppEvent {
    WindowCloseRequestedByUser {
        window_id: WindowId,
    },
    // Signals that a window has been resized.
    WindowResized {
        window_id: WindowId,
        width: i32,
        height: i32,
    },
    // Signals that a window and its native resources have been destroyed.
    // The `WindowId` should be considered invalid after this event.
    WindowDestroyed {
        window_id: WindowId,
    },
    TreeViewItemToggledByUser {
        window_id: WindowId,
        item_id: TreeItemId,
        new_state: CheckState,
    },
    // Signals that a button was clicked.
    ButtonClicked {
        window_id: WindowId,
        control_id: i32,
    },
    // Signals the result of a "Save File" dialog.
    FileSaveDialogCompleted {
        window_id: WindowId,
        result: Option<std::path::PathBuf>,
    },
    MenuLoadProfileClicked,
    MenuSaveProfileAsClicked,
    MenuRefreshClicked,
    MenuSetArchiveClicked,
    FileOpenProfileDialogCompleted {
        window_id: WindowId,
        result: Option<PathBuf>,
    },
    ProfileSelectionDialogCompleted {
        window_id: WindowId,
        chosen_profile_name: Option<String>,
        create_new_requested: bool,
        user_cancelled: bool,
    },
    GenericInputDialogCompleted {
        window_id: WindowId,
        text: Option<String>,
        context_tag: Option<String>,
    },
    FolderPickerDialogCompleted {
        window_id: WindowId,
        path: Option<PathBuf>,
    },
}

// Defines the severity of a message to be displayed, e.g., in the status bar.
// Ordered from least to most severe for comparison. `None` clears, `Debug` is for dev info.
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum MessageSeverity {
    None,        // Clears the status, or lowest priority if not explicitly clearing
    Debug,       // For debug-level information, potentially hidden in release
    Information, // Neutral information
    Warning,     // A warning to the user
    Error,       // An error has occurred
}

// Represents platform-agnostic commands sent from the application logic to the platform layer.
//
// These commands instruct the platform layer to perform specific actions on
// native UI elements.
#[derive(Debug)]
pub enum PlatformCommand {
    SetWindowTitle {
        window_id: WindowId,
        title: String,
    },
    ShowWindow {
        window_id: WindowId,
    },
    CloseWindow {
        window_id: WindowId,
    },
    PopulateTreeView {
        window_id: WindowId,
        items: Vec<TreeItemDescriptor>,
    },
    UpdateTreeItemVisualState {
        window_id: WindowId,
        item_id: TreeItemId,
        new_state: CheckState,
    },
    ShowSaveFileDialog {
        window_id: WindowId,
        title: String,
        default_filename: String,
        filter_spec: String,
        initial_dir: Option<PathBuf>,
    },
    ShowOpenFileDialog {
        window_id: WindowId,
        title: String,
        filter_spec: String,
        initial_dir: Option<PathBuf>,
    },
    UpdateStatusBarText {
        window_id: WindowId,
        text: String,
        severity: MessageSeverity,
    },
    ShowProfileSelectionDialog {
        window_id: WindowId,
        available_profiles: Vec<String>,
        title: String,
        prompt: String,
        emphasize_create_new: bool,
    },
    ShowInputDialog {
        window_id: WindowId,
        title: String,
        prompt: String,
        default_text: Option<String>,
        context_tag: Option<String>,
    },
    ShowFolderPickerDialog {
        window_id: WindowId,
        title: String,
        initial_dir: Option<PathBuf>,
    },
    SetControlEnabled {
        window_id: WindowId,
        control_id: i32,
        enabled: bool,
    },
    QuitApplication,

    CreateMainMenu {
        window_id: WindowId,
        menu_items: Vec<MenuItemConfig>,
    },
    CreateButton {
        window_id: WindowId,
        control_id: i32, // The existing logical ID (e.g., ID_BUTTON_GENERATE_ARCHIVE)
        text: String,
        // Position/size can be added later if needed, relying on WM_SIZE for now.
    },
    CreateStatusBar {
        window_id: WindowId,
        control_id: i32, // The existing logical ID (e.g., ID_STATUS_BAR_CTRL)
        initial_text: String,
        // Position/size can be added later if needed.
    },
    CreateTreeView {
        // New command for explicit TreeView creation
        window_id: WindowId,
        control_id: i32, // The logical ID for the TreeView (e.g., ID_TREEVIEW_CTRL)
                         // Future: styles, position/size if not fully managed by WM_SIZE
    },
}

// --- Trait for App Logic to Handle Events ---

// A trait to be implemented by the application logic layer to handle UI events.
//
// The platform layer calls methods on this trait to notify the application
// logic about user interactions or system events.
pub trait PlatformEventHandler: Send + Sync + 'static {
    // Called by the platform layer when a native UI event has been processed.
    // The implementor should handle the event and enqueue `PlatformCommand`s
    // for the platform layer to execute.
    fn handle_event(&mut self, event: AppEvent);

    // Called by the platform layer when the application is about to exit its main loop.
    // This allows the application logic to perform any necessary cleanup.
    fn on_quit(&mut self) {}

    // Provides a way to get `&mut dyn Any` for downcasting, if necessary.
    fn as_any_mut(&mut self) -> &mut dyn Any;

    // Attempts to dequeue a single `PlatformCommand` from the internal queue.
    // This is called by the platform layer's run loop.
    fn try_dequeue_command(&mut self) -> Option<PlatformCommand>;
}
